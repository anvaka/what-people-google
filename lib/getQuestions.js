/**
 * Provides a wrapper on top of raw JSON queries `queriesDataSet`
 */

/**
 * This data set is generated by https://output.jsbin.com/xakohazulo/1
 * It contains all questions that I wanted to ask Google about states
 * along with Google's auto complete suggestions.
 */
var queriesDataSet = require('../data/queries.json')

module.exports = {
  /**
  * Given a query id returns API to work with query.
  */
  getQuery: getQuery,

  /**
  * Lists all available queries in the "database"
  */
  listQueries: listQueries
}

/**
 * Lists all available queries in the "database"
 */
function listQueries() {
  return Object.keys(queriesDataSet).map(toQuery);

  function toQuery(key) {
    return {
      value: key,
      text: queriesDataSet[key].display,
      selected: false
    };
  }
}

/**
 * Given a query id returns API to work with query.
 */
function getQuery(queryId) {
  var dataSet = queriesDataSet[queryId];
  if (!dataSet) throw new Error('Cannot find query with id ' + queryId);

  // Since we will be accessing each search record by state name very often,
  // we build a look up index from state name to its search record. Each
  // search record contains auto suggestions from Google.
  var stateNameToRecord = buildIndex();

  var queryAPI = {
    getAutoCompleteTextForState: getAutoCompleteTextForState,
    getSearchRecord: getSearchRecord
  };

  return queryAPI;

  function getSearchRecord(stateName) {
    var record = stateNameToRecord[stateName];
    if (!record) throw new Error('State is not found: ' + stateName);
    return record;
  }

  function buildIndex() {
    var lookup = {};
    dataSet.records.forEach(function(x) {
      lookup[x.state] = x;
    });

    return lookup;
  }

  function getAutoCompleteTextForState(stateName) {
    var record = getSearchRecord(stateName);
    var suggestionsCount = record.suggestions.length;

    // It is okay, some questions have no answers from autocomplete.
    if (suggestionsCount === 0) return '';

    return extractText(record.suggestions[0]);
  }

  function extractText(suggestion) {
    var content = ''
    suggestion.replace(/<b>(.+?)<\/b>/g, function(_, what) {
      content += what;
    });

    return content.replace(/^\s|\s$/g, '');
  }
}
